name: 'Create or Update Tag and Release'

on:
  workflow_call:
    inputs:
      runs-on:
        description: Runner que executará os jobs
        type: string
        required: false
        default: ubuntu-latest
      ref-name:
        description: Nome da branch de release
        type: string
        required: false
        default: ${{ github.ref_name }}
    
    secrets:
      PAT:
        required: true

jobs:
  tag-release:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      
      - name: Set Up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]'
      
      - name: Get Commit SHA
        id: commit_sha
        run: |
          COMMIT_SHA="$(git log -2 --pretty=format:"%H" | tail -1)"
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-sha=${COMMIT_SHA}"
      
      - name: Create or Update Tag
        env:
          TAG_NAME: ${{ inputs.ref-name }}
          COMMIT_SHA: ${{ steps.commit_sha.outputs.commit-sha }}
        run: |
          git tag -a ${TAG_NAME} ${COMMIT_SHA} -m "Release ${TAG_NAME}" 2>/dev/null || git tag -f -a ${TAG_NAME} ${COMMIT_SHA} -m "Release ${TAG_NAME}"
          git push origin --tags --force
      
      - name: Delete Outdate Release
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { repo, owner } = context.repo;
            const tag = '${{ inputs.ref-name }}';
            try {
              const result = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag,
              });
              const release = result.data;
              if (!release) {
                console.log(`Nenhuma release foi encontrada para a tag "${tag}".`);
              } else {
                const deleteResult = await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: release.id,
                });
                if (deleteResult.status === 204) {
                  console.log(`A release vinculada à tag "${tag}" foi deletada com sucesso.`);
                } else {
                  core.setFailed(`Falha ao deletar a release vinculada à tag "${tag}". Status: ${deleteResult.status}`);
                }
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`Nenhuma release foi encontrada para a tag "${tag}".`);
              } else {
                core.setFailed(`Falha ao processar a request: ${error.message}`);
              }
            }
      
      - name: Create Github Release
        uses: ncipollo/release-action@v1.14.0
        with:
          token: ${{ secrets.PAT }}
          tag: ${{ inputs.ref-name }}
          name: Release ${{ inputs.ref-name }}
          generateReleaseNotes: true
          prerelease: true
