name: 'Create or Update Tag and Release'

on:
  workflow_call:
    inputs:
      runs-on:
        description: Runner que executará os jobs
        type: string
        required: false
        default: ubuntu-latest
      ref-name:
        description: Nome da branch de release
        type: string
        required: false
        default: ${{ github.ref_name }}
    
    secrets:
      PAT:
        required: true

jobs:
  tag-release:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      
      - name: Set Up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]'
      
      - name: Get Tag Name
        id: tag_name
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const branchName = '${{ inputs.ref-name }}';
            const tagName = branchName.replace('release/', '');
            core.setOutput('tag-name', tagName);
            console.log(`tag-name=${tagName}`);
      
      - name: Get Previous Release
        id: previous_release
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const { repo, owner } = context.repo;
            const tagName = '${{ steps.tag_name.outputs.tag-name }}';
            let previousRelease;
            if (tagName === 'v1') {
              previousRelease = 'main';
            } else {
              const tagNumber = parseInt(branchName.replace('v', ''), 10);
              if (isNaN(tagNumber) || tagNumber <= 1) {
                core.setFailed(`O número da tag é inválido.`);
              }
              previousRelease = `release/v${tagNumber - 1}`;
            }
            const result = await github.rest.repos.getBranch({
              owner,
              repo,
              branch: previousRelease,
            });
            if (result.status !== 200) {
              core.setFailed(`Falha ao localizar a branch "${previousRelease}."`);
            } else {
              console.log(`A branch "${previousRelease}" foi encontrada com sucesso.`);
            }
            core.setOutput('previous-release', previousRelease);
            console.log(`previous-release=${previousRelease}`);
      
      - name: Get Diff Commits Count
        id: diff_commits_count
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const currentReleaseBranchName = '${{ inputs.ref-name }}';
            const previousReleaseBranchName = '${{ steps.previous_release.outputs.previous-release }}';
            const { repo, owner } = context.repo;
            try {
              const diffResult = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: previousReleaseBranchName,
                head: `${owner}:${currentReleaseBranchName}`
              });
              const diffCommitsCount = diffResult.data.total_commits;
              core.setOutput('diff-commits-count', diffCommitsCount);
              console.log(`diff-commits-count=${diffCommitsCount}`);
            } catch(error) {
              core.setFailed(`Falha ao obter a diferença de commits entre as branches "${previousReleaseBranchName}" e "${currentReleaseBranchName}".`);
            }
      
      - name: Get Commit SHA
        id: commit_sha
        run: |
          COMMIT_INDEX=2
          if [[ "${{ steps.diff_commits_count.outputs.diff-commits-count }}" == "0" ]]; then COMMIT_INDEX=1; fi
          COMMIT_SHA="$(git log -${COMMIT_INDEX} --pretty=format:"%H" | tail -1)"
          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-sha=${COMMIT_SHA}"
      
      - name: Create or Update Tag
        env:
          TAG_NAME: ${{ steps.tag_name.outputs.tag-name }}
          COMMIT_SHA: ${{ steps.commit_sha.outputs.commit-sha }}
        run: |
          git tag -a ${TAG_NAME} ${COMMIT_SHA} -m "Release ${TAG_NAME}" 2>/dev/null || git tag -f -a ${TAG_NAME} ${COMMIT_SHA} -m "Release ${TAG_NAME}"
          git push origin --tags --force
      
      - name: Delete Outdate Release
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { repo, owner } = context.repo;
            const tag = '${{ steps.tag_name.outputs.tag-name }}';
            try {
              const result = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag,
              });
              const release = result.data;
              if (!release) {
                console.log(`Nenhuma release foi encontrada para a tag "${tag}".`);
              } else {
                const deleteResult = await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: release.id,
                });
                if (deleteResult.status === 204) {
                  console.log(`A release vinculada à tag "${tag}" foi deletada com sucesso.`);
                } else {
                  core.setFailed(`Falha ao deletar a release vinculada à tag "${tag}". Status: ${deleteResult.status}`);
                }
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`Nenhuma release foi encontrada para a tag "${tag}".`);
              } else {
                core.setFailed(`Falha ao processar a request: ${error.message}`);
              }
            }
      
      - name: Create Github Release
        uses: ncipollo/release-action@v1.14.0
        with:
          token: ${{ secrets.PAT }}
          allowUpdates: true
          tag: ${{ steps.tag_name.outputs.tag-name }}
          name: Release ${{ steps.tag_name.outputs.tag-name }}
          generateReleaseNotes: true
          prerelease: true
